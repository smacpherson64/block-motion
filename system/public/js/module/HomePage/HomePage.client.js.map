{
  "version": 3,
  "sources": ["../../../../dependencies/isometric.ts", "../../../../utils/numbers.ts", "../../../../utils/game.ts", "../../../../ui/components/Game/Block.tsx", "../../../../utils/board.ts", "../../../../ui/components/Game/Board.tsx", "../../../../ui/components/Game/Demo.tsx", "../../../../ui/components/HomePage/HomePage.tsx", "../../../../ui/components/HomePage/HomePage.client.tsx"],
  "sourcesContent": ["import * as ReactImport from \"https://esm.sh/react@18.2.0/react.js\";\nimport * as ReactDOMImport from \"https://esm.sh/react-dom@18.2.0/client.js\";\nimport * as xstateImport from \"https://esm.sh/v96/xstate@4.34.0/es2021/xstate.js\";\nexport * as hash from \"https://esm.sh/v96/hash-wasm@4.9.0/es2021/hash-wasm.js\";\n\nexport const React = ReactImport;\nexport const ReactDOM = ReactDOMImport;\nexport const xstate = xstateImport;\n", "export const clamp = (min: number, max: number) => (number: number) => {\n  if (number < min) {\n    return min;\n  }\n\n  if (number > max) {\n    return max;\n  }\n\n  return number;\n};\n\nexport const wrap = (min: number, max: number) => (number: number) =>\n  number < min ? max : number > max ? min : number;\n", "import { wrap } from \"./numbers.ts\";\n\nexport const BlockTypes = {\n  unit: \"unit\",\n  base: \"base\",\n} as const;\n\nexport const Directions = {\n  NE: 0b00000001,\n  N: 0b00000010,\n  NW: 0b00000100,\n  E: 0b00001000,\n  W: 0b00010000,\n  SE: 0b00100000,\n  S: 0b01000000,\n  SW: 0b10000000,\n};\n\nexport type UnitBlock = {\n  player: number;\n  type: typeof BlockTypes[\"unit\"];\n  direction: number;\n  row: number;\n  column: number;\n};\n\nexport type BaseBlock = {\n  player: number;\n  type: typeof BlockTypes[\"base\"];\n  row: number;\n  column: number;\n};\n\nexport type Blocks = UnitBlock | BaseBlock;\n\nexport const moveBlocks = (blocks: Blocks[], rows: number, columns: number) => {\n  const wrapRow = wrap(0, rows - 1);\n  const wrapColumn = wrap(0, columns - 1);\n\n  return blocks.map((block) => {\n    if (block.type === \"base\") {\n      return block;\n    }\n\n    if (block.type === \"unit\") {\n      const { row, column } = block;\n\n      const previousRow = wrapRow(row - 1);\n      const nextRow = wrapRow(row + 1);\n      const previousColumn = wrapColumn(column - 1);\n      const nextColumn = wrapColumn(column + 1);\n\n      switch (block.direction) {\n        case Directions.NE: {\n          return { ...block, row: previousRow, column: previousColumn };\n        }\n        case Directions.N: {\n          return { ...block, row: previousRow, column: column };\n        }\n        case Directions.NW: {\n          return { ...block, row: previousRow, column: nextColumn };\n        }\n        case Directions.E: {\n          return { ...block, row: row, column: previousColumn };\n        }\n        case Directions.W: {\n          return { ...block, row: row, column: nextColumn };\n        }\n        case Directions.SE: {\n          return { ...block, row: nextRow, column: previousColumn };\n        }\n        case Directions.S: {\n          return { ...block, row: nextRow, column: column };\n        }\n        case Directions.SW: {\n          return { ...block, row: nextRow, column: nextColumn };\n        }\n        default:\n          return block;\n      }\n    }\n\n    return block;\n  });\n};\n\nexport type GameConfig = {\n  speed: number;\n  lives: number;\n  max_units: number;\n  bases: number;\n  rows: number;\n  columns: number;\n  players: number;\n};\n\nexport const defaultGameConfig: GameConfig = {\n  speed: 200,\n  lives: 3,\n  max_units: 8,\n  bases: 1,\n  rows: 10,\n  columns: 20,\n  players: 2,\n};\n\ntype Actions =\n  | {\n      type: \"PLAYER_REQUESTED_GAME_CONFIG_CHANGE\";\n      payload: Partial<GameConfig>;\n    }\n  | {\n      type: \"PLAYER_REQUESTED_UNIT_CELL\";\n      payload: {\n        index: number;\n        player: number;\n        direction: number;\n      };\n    }\n  | {\n      type: \"SYSTEM_RECEIVED_GAME_TICK\";\n    };\n\nexport type GameState = {\n  config: GameConfig;\n  blocks: Blocks[];\n};\n\nexport const getDefaultState = (config: GameConfig) => ({\n  config,\n  blocks: [],\n});\n\nexport const gameReducer = (\n  state: GameState = getDefaultState(defaultGameConfig),\n  action: Actions\n): GameState => {\n  switch (action.type) {\n    case \"PLAYER_REQUESTED_UNIT_CELL\": {\n      const nextBlocks = [...state.blocks];\n\n      const nextBlockValue: Blocks = {\n        type: BlockTypes.unit,\n        ...action.payload,\n      };\n\n      nextBlocks[action.payload.index] = nextBlockValue;\n      return { ...state, blocks: nextBlocks };\n    }\n\n    case \"SYSTEM_RECEIVED_GAME_TICK\": {\n      const nextBlocks = moveBlocks(\n        state.blocks,\n        state.config.rows,\n        state.config.columns\n      );\n      return { ...state, blocks: nextBlocks };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n", "import { React } from \"../../../dependencies/isometric.ts\";\nimport { Theme } from \"../../../utils/board.ts\";\nimport {\n  BaseBlock,\n  Blocks,\n  Directions,\n  UnitBlock,\n} from \"../../../utils/game.ts\";\nimport { clamp } from \"../../../utils/numbers.ts\";\n\nexport type BlockActions = \"PLACE_BASE\" | \"PLACE_UNIT\" | \"NONE\";\n\nexport type PlaceBaseEvent = {\n  type: \"PLACE_BASE\";\n  payload: BaseBlock;\n};\n\nexport type PlaceUnitEvent = {\n  type: \"PLACE_UNIT\";\n  payload: UnitBlock;\n};\n\nexport type BlockEvents = PlaceBaseEvent | PlaceUnitEvent;\n\nexport const isPlaceBaseEvent = (\n  event: BlockEvents\n): event is PlaceBaseEvent => {\n  return event.type === \"PLACE_BASE\";\n};\n\nexport const isPlaceUnitEvent = (\n  event: BlockEvents\n): event is PlaceUnitEvent => {\n  return event.type === \"PLACE_UNIT\";\n};\n\nconst getBounds = ({\n  theme,\n  row,\n  column,\n}: {\n  theme: Theme;\n  row: number;\n  column: number;\n}) => {\n  const block = theme.blockSize;\n  const halfBlock = theme.blockSize / 2;\n\n  // TOP LEFT CORNER\n  const x = column * block;\n  const y = row * block;\n\n  // CENTER\n  const cx = x + halfBlock;\n  const cy = y + halfBlock;\n\n  // CLAMP\n  const minX = cx + block * -1;\n  const maxX = cx + block;\n  const minY = cy + block * -1;\n  const maxY = cy + block;\n\n  const clampX = clamp(minX, maxX);\n  const clampY = clamp(minY, maxY);\n\n  return { x, y, cx, cy, minX, maxX, minY, maxY, halfBlock, clampX, clampY };\n};\n\ntype Props = {\n  theme: Theme;\n  index: number;\n  blocks?: Blocks[];\n  onActivate?: (data: PlaceBaseEvent | PlaceUnitEvent) => void;\n  emulatedDelta?: {\n    x: number;\n    y: number;\n  };\n  action: BlockActions;\n  row: number;\n  column: number;\n  player: number;\n};\n\nexport function Block(props: Props) {\n  const {\n    theme,\n    index,\n    emulatedDelta,\n    action,\n    column,\n    row,\n    player,\n    onActivate = () => {},\n    blocks = [],\n  } = props;\n\n  const lastTouchRef = React.useRef<React.Touch>();\n\n  const { y, cx, cy, clampX, clampY, halfBlock } = React.useMemo(\n    () => getBounds({ row, column, theme }),\n    [row, column, theme]\n  );\n\n  const [manualDelta, setManualDelta] = React.useState({ x: 0, y: 0 });\n\n  const delta = React.useMemo(\n    () => (emulatedDelta ? emulatedDelta : manualDelta),\n    [manualDelta, emulatedDelta]\n  );\n\n  const selectorPosition = React.useMemo(() => {\n    return { x: clampX(cx + delta.x), y: clampY(cy + delta.y) };\n  }, [delta.x, delta.y, clampX, clampY, cx, cy]);\n\n  const direction = React.useMemo(() => {\n    const left = selectorPosition.x < cx + halfBlock * -1;\n    const right = selectorPosition.x > cx + halfBlock;\n    const centerX = !left && !right;\n    const top = selectorPosition.y < cy + halfBlock * -1;\n    const bottom = selectorPosition.y > cy + halfBlock;\n    const centerY = !top && !bottom;\n\n    switch (true) {\n      case left && top:\n        return Directions.NE;\n      case centerX && top:\n        return Directions.N;\n      case right && top:\n        return Directions.NW;\n      case left && centerY:\n        return Directions.E;\n      case right && centerY:\n        return Directions.W;\n      case left && bottom:\n        return Directions.SE;\n      case centerX && bottom:\n        return Directions.S;\n      case right && bottom:\n        return Directions.SW;\n      case centerX && centerY:\n      default:\n        return null;\n    }\n  }, [selectorPosition.x, selectorPosition.y, halfBlock, cx, cy]);\n\n  const [isManuallyCapturing, setIsManuallyCapturing] = React.useState(false);\n\n  const isCapturing = React.useMemo(\n    () => !!emulatedDelta || isManuallyCapturing,\n    [!!emulatedDelta, isManuallyCapturing]\n  );\n\n  const fill = React.useMemo(() => {\n    if (blocks.find((block) => block.type === \"base\")) {\n      return \"fill-red-500\";\n    }\n\n    if (isCapturing) {\n      return \"fill-slate-700\";\n    }\n\n    if (blocks.find((block) => block.type === \"unit\")) {\n      return \"fill-white\";\n    }\n\n    return \"fill-transparent\";\n  }, [blocks, isCapturing]);\n\n  if (action === \"PLACE_BASE\") {\n    return (\n      <g className=\"relative z-10\">\n        <rect\n          onClick={() => {\n            onActivate({\n              type: action,\n              payload: {\n                type: \"base\",\n                player,\n                row,\n                column,\n              },\n            });\n          }}\n          width={theme.blockSize}\n          height={theme.blockSize}\n          x={column * theme.blockSize}\n          y={y}\n          radius=\"10\"\n          className={fill}\n        />\n      </g>\n    );\n  }\n\n  if (action === \"PLACE_UNIT\") {\n    return (\n      <g className=\"relative z-10\">\n        <rect\n          onPointerDown={(event) => {\n            const target = event.currentTarget;\n            target.setPointerCapture(event.pointerId);\n\n            setIsManuallyCapturing(true);\n          }}\n          onTouchMove={(event) => {\n            if (isCapturing) {\n              const touch = event.touches[0];\n              const lastTouch = lastTouchRef.current;\n\n              setManualDelta({\n                x: lastTouch ? delta.x + touch.pageX - lastTouch.pageX : 0,\n                y: lastTouch ? delta.y + touch.pageY - lastTouch.pageY : 0,\n              });\n\n              lastTouchRef.current = touch;\n            }\n          }}\n          onTouchEnd={() => {\n            lastTouchRef.current = undefined;\n          }}\n          onPointerMove={(event) => {\n            if (isCapturing) {\n              setManualDelta({\n                x: delta.x + event.movementX,\n                y: delta.y + event.movementY,\n              });\n            }\n          }}\n          onPointerUp={(event) => {\n            const target = event.currentTarget;\n            target.releasePointerCapture(event.pointerId);\n\n            if (direction) {\n              onActivate({\n                type: \"PLACE_UNIT\",\n                payload: {\n                  type: \"unit\",\n                  player,\n                  row,\n                  column,\n                  direction,\n                },\n              });\n            }\n\n            setIsManuallyCapturing(false);\n            setManualDelta({ x: 0, y: 0 });\n          }}\n          onPointerCancel={(event) => {\n            const target = event.currentTarget;\n            target.releasePointerCapture(event.pointerId);\n\n            if (direction !== null) {\n              onActivate({\n                type: \"PLACE_UNIT\",\n                payload: {\n                  type: \"unit\",\n                  player,\n                  row,\n                  column,\n                  direction,\n                },\n              });\n            }\n\n            setIsManuallyCapturing(false);\n            setManualDelta({ x: 0, y: 0 });\n          }}\n          width={theme.blockSize}\n          height={theme.blockSize}\n          x={column * theme.blockSize}\n          y={y}\n          radius=\"10\"\n          className={`select-none ${fill} touch-manipulation`}\n        />\n        {isCapturing ? (\n          <>\n            <path\n              strokeLinecap=\"round\"\n              className=\"stroke-2 stroke-gray-400/30 z-10 relative\"\n              x={cx}\n              y={cy}\n              d={`M${cx} ${cy} L ${selectorPosition.x} ${selectorPosition.y} Z`}\n            />\n            <circle\n              cx={selectorPosition.x}\n              cy={selectorPosition.y}\n              r={theme.blockSize * 0.18}\n              className=\"fill-gray-700\"\n            />\n          </>\n        ) : null}\n      </g>\n    );\n  }\n\n  return (\n    <rect\n      width={theme.blockSize}\n      height={theme.blockSize}\n      x={column * theme.blockSize}\n      y={y}\n      radius=\"10\"\n      className={fill}\n    />\n  );\n}\n", "export type Theme = {\n  gap: number;\n  blockSize: number;\n};\n\nexport const defaultTheme: Theme = {\n  gap: 1,\n  blockSize: 25,\n};\n\nexport const getRow = (index: number, { columns }: { columns: number }) =>\n  Math.floor(index / columns);\n\nexport const getColumn = (index: number, { columns }: { columns: number }) =>\n  index % columns;\n\nexport const getIndex = (columns: number) => (row: number, column: number) =>\n  row * columns + column;\n", "import { React } from \"../../../dependencies/isometric.ts\";\nimport { getColumn, getRow, Theme } from \"../../../utils/board.ts\";\n\ntype BoardProps = {\n  theme: Theme;\n  rows: number;\n  columns: number;\n  players: number;\n  children: React.ReactNode;\n};\n\nexport default function Board(props: BoardProps) {\n  const { theme, children, players, rows, columns } = props;\n  const { height, width } = React.useMemo(\n    () => ({\n      height: theme.blockSize * rows,\n      width: theme.blockSize * columns,\n    }),\n    [theme.blockSize, rows, columns]\n  );\n\n  const grid = React.useMemo(() => {\n    return new Array(rows * columns).fill(null).map((_, index) => {\n      const row = getRow(index, { columns });\n      const column = getColumn(index, { columns });\n      const y = row * theme.blockSize;\n\n      return (\n        <rect\n          key={index}\n          width={theme.blockSize}\n          height={theme.blockSize}\n          x={column * theme.blockSize}\n          y={y}\n          radius=\"10\"\n          strokeWidth={theme.gap}\n          className={`relative z-0 select-none stroke-slate-800 fill-transparent`}\n        />\n      );\n    });\n  }, []);\n\n  return (\n    <div className=\"overflow-hidden bg-slate-900 border-2 border-gray-700 rounded-md relative select-none\">\n      <svg\n        height={height}\n        width={width}\n        viewBox={`0 0 ${width} ${height}`}\n        className=\"relative\"\n      >\n        {players === 2 ? (\n          <rect\n            x={width / 2 - 2.5}\n            y=\"0\"\n            height={height}\n            width={5}\n            className=\"fill-slate-800 z-0\"\n          />\n        ) : null}\n        {grid}\n        {children}\n      </svg>\n    </div>\n  );\n}\n", "import { React } from \"../../../dependencies/isometric.ts\";\nimport {\n  Block,\n  isPlaceBaseEvent,\n  isPlaceUnitEvent,\n} from \"../../components/Game/Block.tsx\";\nimport Board from \"../../components/Game/Board.tsx\";\nimport { getColumn, getRow, Theme } from \"../../../utils/board.ts\";\nimport { Blocks, moveBlocks } from \"../../../utils/game.ts\";\n\nexport default function Demo(props: {\n  theme: Theme;\n  rows: number;\n  columns: number;\n}) {\n  const { theme, rows, columns } = props;\n\n  const [blocks, setBlocks] = React.useState<Blocks[]>([]);\n  const [playing, setPlaying] = React.useState(false);\n\n  const hasBase = !!blocks.find((block) => block.type === \"base\");\n\n  React.useEffect(() => {\n    if (playing) {\n      const interval = setInterval(() => {\n        setBlocks((blocks) => moveBlocks(blocks, rows, columns));\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [playing]);\n\n  const cells = React.useMemo(\n    () =>\n      new Array(rows * columns).fill(null).map((_, index) => {\n        const column = getColumn(index, { columns });\n        const row = getRow(index, { columns });\n\n        return { column, row };\n      }),\n    [rows, columns]\n  );\n\n  return (\n    <>\n      <Board theme={theme} rows={rows} columns={columns} players={1}>\n        {cells.map(({ column, row }, index) => {\n          return (\n            <Block\n              key={`${column}-${row}-${index}`}\n              blocks={blocks.filter(\n                ({ row: thisRow, column: thisColumn }) =>\n                  row === thisRow && column === thisColumn\n              )}\n              theme={theme}\n              index={index}\n              action={hasBase ? \"PLACE_UNIT\" : \"PLACE_BASE\"}\n              player={1}\n              row={row}\n              column={column}\n              onActivate={(data) => {\n                if (isPlaceBaseEvent(data)) {\n                  setBlocks((blocks) => [...blocks, data.payload]);\n                }\n\n                if (isPlaceUnitEvent(data)) {\n                  if (\n                    !blocks.find(\n                      (block) =>\n                        block.type === \"unit\" &&\n                        block.direction === data.payload.direction &&\n                        block.row === data.payload.row &&\n                        block.column === data.payload.column\n                    )\n                  ) {\n                    setBlocks((blocks) => [...blocks, data.payload]);\n                  }\n                }\n              }}\n            />\n          );\n        })}\n      </Board>\n      <div className=\"flex space-x-2 p-2\">\n        <button\n          type=\"button\"\n          onClick={() => {\n            setBlocks((blocks) => moveBlocks(blocks, rows, columns));\n          }}\n          className=\"p-2 px-3 bg-slate-900 text-white rounded\"\n        >\n          Move Blocks\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => {\n            setPlaying((current) => !current);\n          }}\n          className=\"p-2 px-3 bg-slate-900 text-white rounded\"\n        >\n          {playing ? \"pause\" : \"play\"}\n        </button>\n      </div>\n    </>\n  );\n}\n", "import { React } from \"../../../dependencies/isometric.ts\";\nimport Demo from \"../../../ui/components/Game/Demo.tsx\";\n\nconst rows = 5;\nconst columns = 9;\nconst theme = { gap: 1, blockSize: 50 };\n\nexport default function Page() {\n  return (\n    <html lang=\"en-us\" className=\"h-full w-full\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta\n          name=\"description\"\n          content=\"Block motion is a live action strategy game where two players aim blocks at each other's bases.\"\n        />\n\n        <title>Block motion \u2B05\uFE0F</title>\n\n        <style>{`body {overflow: hidden !important; -webkit-overflow-scrolling: touch;`}</style>\n\n        <link rel=\"stylesheet\" href=\"/public/styles.css\" />\n        <link\n          rel=\"icon\"\n          href=\"data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>\u2B05\uFE0F</text></svg>\"\n        />\n\n        <script></script>\n        <script\n          type=\"module\"\n          src=\"/public/js/module/HomePage/HomePage.client.js\"\n        />\n        <script noModule src=\"/public/js/classic/HomePage/HomePage.client.js\" />\n      </head>\n\n      <body className=\"bg-slate-800 h-full min-h-screen w-full grid place-items-center text-gray-100\">\n        <div>\n          <Demo theme={theme} rows={rows} columns={columns} />\n        </div>\n      </body>\n    </html>\n  );\n}\n", "import { React, ReactDOM } from \"../../../dependencies/isometric.ts\";\nimport HomePage from \"./HomePage.tsx\";\n\nReactDOM.hydrateRoot(document, <HomePage />);\n"],
  "mappings": "AAAA,UAAYA,MAAiB,uCAC7B,UAAYC,MAAoB,4CAChC,UAAYC,MAAkB,oDAC9B,UAAYC,OAAU,yDAEf,IAAMC,EAAQJ,EACRK,EAAWJ,ECNjB,IAAMK,EAAQ,CAACC,EAAaC,IAAiBC,GAC9CA,EAASF,EACJA,EAGLE,EAASD,EACJA,EAGFC,EAGIC,EAAO,CAACH,EAAaC,IAAiBC,GACjDA,EAASF,EAAMC,EAAMC,EAASD,EAAMD,EAAME,ECNrC,IAAME,EAAa,CACxB,GAAI,EACJ,EAAG,EACH,GAAI,EACJ,EAAG,EACH,EAAG,GACH,GAAI,GACJ,EAAG,GACH,GAAI,GACN,EAmBaC,EAAa,CAACC,EAAkBC,EAAcC,IAAoB,CAC7E,IAAMC,EAAUC,EAAK,EAAGH,EAAO,CAAC,EAC1BI,EAAaD,EAAK,EAAGF,EAAU,CAAC,EAEtC,OAAOF,EAAO,IAAKM,GAAU,CAC3B,GAAIA,EAAM,OAAS,OACjB,OAAOA,EAGT,GAAIA,EAAM,OAAS,OAAQ,CACzB,GAAM,CAAE,IAAAC,EAAK,OAAAC,CAAO,EAAIF,EAElBG,EAAcN,EAAQI,EAAM,CAAC,EAC7BG,EAAUP,EAAQI,EAAM,CAAC,EACzBI,EAAiBN,EAAWG,EAAS,CAAC,EACtCI,EAAaP,EAAWG,EAAS,CAAC,EAExC,OAAQF,EAAM,UAAW,CACvB,KAAKR,EAAW,GACd,MAAO,CAAE,GAAGQ,EAAO,IAAKG,EAAa,OAAQE,CAAe,EAE9D,KAAKb,EAAW,EACd,MAAO,CAAE,GAAGQ,EAAO,IAAKG,EAAa,OAAQD,CAAO,EAEtD,KAAKV,EAAW,GACd,MAAO,CAAE,GAAGQ,EAAO,IAAKG,EAAa,OAAQG,CAAW,EAE1D,KAAKd,EAAW,EACd,MAAO,CAAE,GAAGQ,EAAO,IAAKC,EAAK,OAAQI,CAAe,EAEtD,KAAKb,EAAW,EACd,MAAO,CAAE,GAAGQ,EAAO,IAAKC,EAAK,OAAQK,CAAW,EAElD,KAAKd,EAAW,GACd,MAAO,CAAE,GAAGQ,EAAO,IAAKI,EAAS,OAAQC,CAAe,EAE1D,KAAKb,EAAW,EACd,MAAO,CAAE,GAAGQ,EAAO,IAAKI,EAAS,OAAQF,CAAO,EAElD,KAAKV,EAAW,GACd,MAAO,CAAE,GAAGQ,EAAO,IAAKI,EAAS,OAAQE,CAAW,EAEtD,QACE,OAAON,CACX,CACF,CAEA,OAAOA,CACT,CAAC,CACH,EC5DO,IAAMO,EACXC,GAEOA,EAAM,OAAS,aAGXC,EACXD,GAEOA,EAAM,OAAS,aAGlBE,EAAY,CAAC,CACjB,MAAAC,EACA,IAAAC,EACA,OAAAC,CACF,IAIM,CACJ,IAAMC,EAAQH,EAAM,UACdI,EAAYJ,EAAM,UAAY,EAG9BK,EAAIH,EAASC,EACbG,EAAIL,EAAME,EAGVI,EAAKF,EAAID,EACTI,EAAKF,EAAIF,EAGTK,EAAOF,EAAKJ,EAAQ,GACpBO,EAAOH,EAAKJ,EACZQ,EAAOH,EAAKL,EAAQ,GACpBS,EAAOJ,EAAKL,EAEZU,EAASC,EAAML,EAAMC,CAAI,EACzBK,EAASD,EAAMH,EAAMC,CAAI,EAE/B,MAAO,CAAE,EAAAP,EAAG,EAAAC,EAAG,GAAAC,EAAI,GAAAC,EAAI,KAAAC,EAAM,KAAAC,EAAM,KAAAC,EAAM,KAAAC,EAAM,UAAAR,EAAW,OAAAS,EAAQ,OAAAE,CAAO,CAC3E,EAiBO,SAASC,EAAMC,EAAc,CAClC,GAAM,CACJ,MAAAjB,EACA,MAAAkB,EACA,cAAAC,EACA,OAAAC,EACA,OAAAlB,EACA,IAAAD,EACA,OAAAoB,EACA,WAAAC,EAAa,IAAM,CAAC,EACpB,OAAAC,EAAS,CAAC,CACZ,EAAIN,EAEEO,EAAeC,EAAM,OAAoB,EAEzC,CAAE,EAAAnB,EAAG,GAAAC,EAAI,GAAAC,EAAI,OAAAK,EAAQ,OAAAE,EAAQ,UAAAX,CAAU,EAAIqB,EAAM,QACrD,IAAM1B,EAAU,CAAE,IAAAE,EAAK,OAAAC,EAAQ,MAAAF,CAAM,CAAC,EACtC,CAACC,EAAKC,EAAQF,CAAK,CACrB,EAEM,CAAC0B,EAAaC,CAAc,EAAIF,EAAM,SAAS,CAAE,EAAG,EAAG,EAAG,CAAE,CAAC,EAE7DG,EAAQH,EAAM,QAClB,IAAON,GAAgCO,EACvC,CAACA,EAAaP,CAAa,CAC7B,EAEMU,EAAmBJ,EAAM,QAAQ,KAC9B,CAAE,EAAGZ,EAAON,EAAKqB,EAAM,CAAC,EAAG,EAAGb,EAAOP,EAAKoB,EAAM,CAAC,CAAE,GACzD,CAACA,EAAM,EAAGA,EAAM,EAAGf,EAAQE,EAAQR,EAAIC,CAAE,CAAC,EAEvCsB,EAAYL,EAAM,QAAQ,IAAM,CACpC,IAAMM,EAAOF,EAAiB,EAAItB,EAAKH,EAAY,GAC7C4B,EAAQH,EAAiB,EAAItB,EAAKH,EAClC6B,EAAU,CAACF,GAAQ,CAACC,EACpBE,EAAML,EAAiB,EAAIrB,EAAKJ,EAAY,GAC5C+B,EAASN,EAAiB,EAAIrB,EAAKJ,EACnCgC,EAAU,CAACF,GAAO,CAACC,EAEzB,OAAQ,GAAM,CACZ,KAAKJ,GAAQG,GACX,OAAOG,EAAW,GACpB,KAAKJ,GAAWC,GACd,OAAOG,EAAW,EACpB,KAAKL,GAASE,GACZ,OAAOG,EAAW,GACpB,KAAKN,GAAQK,GACX,OAAOC,EAAW,EACpB,KAAKL,GAASI,GACZ,OAAOC,EAAW,EACpB,KAAKN,GAAQI,GACX,OAAOE,EAAW,GACpB,KAAKJ,GAAWE,GACd,OAAOE,EAAW,EACpB,KAAKL,GAASG,GACZ,OAAOE,EAAW,GACpB,KAAKJ,GAAWG,GAChB,QACE,OAAO,IACX,CACF,EAAG,CAACP,EAAiB,EAAGA,EAAiB,EAAGzB,EAAWG,EAAIC,CAAE,CAAC,EAExD,CAAC8B,EAAqBC,CAAsB,EAAId,EAAM,SAAS,EAAK,EAEpEe,EAAcf,EAAM,QACxB,IAAM,CAAC,CAACN,GAAiBmB,EACzB,CAAC,CAAC,CAACnB,EAAemB,CAAmB,CACvC,EAEMG,EAAOhB,EAAM,QAAQ,IACrBF,EAAO,KAAMpB,GAAUA,EAAM,OAAS,MAAM,EACvC,eAGLqC,EACK,iBAGLjB,EAAO,KAAMpB,GAAUA,EAAM,OAAS,MAAM,EACvC,aAGF,mBACN,CAACoB,EAAQiB,CAAW,CAAC,EAExB,OAAIpB,IAAW,aAEXK,EAAA,cAAC,KAAE,UAAU,iBACXA,EAAA,cAAC,QACC,QAAS,IAAM,CACbH,EAAW,CACT,KAAMF,EACN,QAAS,CACP,KAAM,OACN,OAAAC,EACA,IAAApB,EACA,OAAAC,CACF,CACF,CAAC,CACH,EACA,MAAOF,EAAM,UACb,OAAQA,EAAM,UACd,EAAGE,EAASF,EAAM,UAClB,EAAGM,EACH,OAAO,KACP,UAAWmC,EACb,CACF,EAIArB,IAAW,aAEXK,EAAA,cAAC,KAAE,UAAU,iBACXA,EAAA,cAAC,QACC,cAAgB5B,GAAU,CACTA,EAAM,cACd,kBAAkBA,EAAM,SAAS,EAExC0C,EAAuB,EAAI,CAC7B,EACA,YAAc1C,GAAU,CACtB,GAAI2C,EAAa,CACf,IAAME,EAAQ7C,EAAM,QAAQ,GACtB8C,EAAYnB,EAAa,QAE/BG,EAAe,CACb,EAAGgB,EAAYf,EAAM,EAAIc,EAAM,MAAQC,EAAU,MAAQ,EACzD,EAAGA,EAAYf,EAAM,EAAIc,EAAM,MAAQC,EAAU,MAAQ,CAC3D,CAAC,EAEDnB,EAAa,QAAUkB,CACzB,CACF,EACA,WAAY,IAAM,CAChBlB,EAAa,QAAU,MACzB,EACA,cAAgB3B,GAAU,CACpB2C,GACFb,EAAe,CACb,EAAGC,EAAM,EAAI/B,EAAM,UACnB,EAAG+B,EAAM,EAAI/B,EAAM,SACrB,CAAC,CAEL,EACA,YAAcA,GAAU,CACPA,EAAM,cACd,sBAAsBA,EAAM,SAAS,EAExCiC,GACFR,EAAW,CACT,KAAM,aACN,QAAS,CACP,KAAM,OACN,OAAAD,EACA,IAAApB,EACA,OAAAC,EACA,UAAA4B,CACF,CACF,CAAC,EAGHS,EAAuB,EAAK,EAC5BZ,EAAe,CAAE,EAAG,EAAG,EAAG,CAAE,CAAC,CAC/B,EACA,gBAAkB9B,GAAU,CACXA,EAAM,cACd,sBAAsBA,EAAM,SAAS,EAExCiC,IAAc,MAChBR,EAAW,CACT,KAAM,aACN,QAAS,CACP,KAAM,OACN,OAAAD,EACA,IAAApB,EACA,OAAAC,EACA,UAAA4B,CACF,CACF,CAAC,EAGHS,EAAuB,EAAK,EAC5BZ,EAAe,CAAE,EAAG,EAAG,EAAG,CAAE,CAAC,CAC/B,EACA,MAAO3B,EAAM,UACb,OAAQA,EAAM,UACd,EAAGE,EAASF,EAAM,UAClB,EAAGM,EACH,OAAO,KACP,UAAW,eAAemC,uBAC5B,EACCD,EACCf,EAAA,cAAAA,EAAA,cACEA,EAAA,cAAC,QACC,cAAc,QACd,UAAU,4CACV,EAAGlB,EACH,EAAGC,EACH,EAAG,IAAID,KAAMC,OAAQqB,EAAiB,KAAKA,EAAiB,MAC9D,EACAJ,EAAA,cAAC,UACC,GAAII,EAAiB,EACrB,GAAIA,EAAiB,EACrB,EAAG7B,EAAM,UAAY,IACrB,UAAU,gBACZ,CACF,EACE,IACN,EAKFyB,EAAA,cAAC,QACC,MAAOzB,EAAM,UACb,OAAQA,EAAM,UACd,EAAGE,EAASF,EAAM,UAClB,EAAGM,EACH,OAAO,KACP,UAAWmC,EACb,CAEJ,CCxSO,IAAMG,EAAS,CAACC,EAAe,CAAE,QAAAC,CAAQ,IAC9C,KAAK,MAAMD,EAAQC,CAAO,EAEfC,EAAY,CAACF,EAAe,CAAE,QAAAC,CAAQ,IACjDD,EAAQC,ECHK,SAARE,EAAuBC,EAAmB,CAC/C,GAAM,CAAE,MAAAC,EAAO,SAAAC,EAAU,QAAAC,EAAS,KAAAC,EAAM,QAAAC,CAAQ,EAAIL,EAC9C,CAAE,OAAAM,EAAQ,MAAAC,CAAM,EAAIC,EAAM,QAC9B,KAAO,CACL,OAAQP,EAAM,UAAYG,EAC1B,MAAOH,EAAM,UAAYI,CAC3B,GACA,CAACJ,EAAM,UAAWG,EAAMC,CAAO,CACjC,EAEMI,EAAOD,EAAM,QAAQ,IAClB,IAAI,MAAMJ,EAAOC,CAAO,EAAE,KAAK,IAAI,EAAE,IAAI,CAACK,EAAGC,IAAU,CAC5D,IAAMC,EAAMC,EAAOF,EAAO,CAAE,QAAAN,CAAQ,CAAC,EAC/BS,EAASC,EAAUJ,EAAO,CAAE,QAAAN,CAAQ,CAAC,EACrCW,EAAIJ,EAAMX,EAAM,UAEtB,OACEO,EAAA,cAAC,QACC,IAAKG,EACL,MAAOV,EAAM,UACb,OAAQA,EAAM,UACd,EAAGa,EAASb,EAAM,UAClB,EAAGe,EACH,OAAO,KACP,YAAaf,EAAM,IACnB,UAAW,6DACb,CAEJ,CAAC,EACA,CAAC,CAAC,EAEL,OACEO,EAAA,cAAC,OAAI,UAAU,yFACbA,EAAA,cAAC,OACC,OAAQF,EACR,MAAOC,EACP,QAAS,OAAOA,KAASD,IACzB,UAAU,YAETH,IAAY,EACXK,EAAA,cAAC,QACC,EAAGD,EAAQ,EAAI,IACf,EAAE,IACF,OAAQD,EACR,MAAO,EACP,UAAU,qBACZ,EACE,KACHG,EACAP,CACH,CACF,CAEJ,CCtDe,SAARe,EAAsBC,EAI1B,CACD,GAAM,CAAE,MAAAC,EAAO,KAAAC,EAAM,QAAAC,CAAQ,EAAIH,EAE3B,CAACI,EAAQC,CAAS,EAAIC,EAAM,SAAmB,CAAC,CAAC,EACjD,CAACC,EAASC,CAAU,EAAIF,EAAM,SAAS,EAAK,EAE5CG,EAAU,CAAC,CAACL,EAAO,KAAMM,GAAUA,EAAM,OAAS,MAAM,EAE9DJ,EAAM,UAAU,IAAM,CACpB,GAAIC,EAAS,CACX,IAAMI,EAAW,YAAY,IAAM,CACjCN,EAAWD,GAAWQ,EAAWR,EAAQF,EAAMC,CAAO,CAAC,CACzD,EAAG,GAAI,EAEP,MAAO,IAAM,cAAcQ,CAAQ,CACrC,CACF,EAAG,CAACJ,CAAO,CAAC,EAEZ,IAAMM,EAAQP,EAAM,QAClB,IACE,IAAI,MAAMJ,EAAOC,CAAO,EAAE,KAAK,IAAI,EAAE,IAAI,CAACW,EAAGC,IAAU,CACrD,IAAMC,EAASC,EAAUF,EAAO,CAAE,QAAAZ,CAAQ,CAAC,EACrCe,EAAMC,EAAOJ,EAAO,CAAE,QAAAZ,CAAQ,CAAC,EAErC,MAAO,CAAE,OAAAa,EAAQ,IAAAE,CAAI,CACvB,CAAC,EACH,CAAChB,EAAMC,CAAO,CAChB,EAEA,OACEG,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACc,EAAA,CAAM,MAAOnB,EAAO,KAAMC,EAAM,QAASC,EAAS,QAAS,GACzDU,EAAM,IAAI,CAAC,CAAE,OAAAG,EAAQ,IAAAE,CAAI,EAAGH,IAEzBT,EAAA,cAACe,EAAA,CACC,IAAK,GAAGL,KAAUE,KAAOH,IACzB,OAAQX,EAAO,OACb,CAAC,CAAE,IAAKkB,EAAS,OAAQC,CAAW,IAClCL,IAAQI,GAAWN,IAAWO,CAClC,EACA,MAAOtB,EACP,MAAOc,EACP,OAAQN,EAAU,aAAe,aACjC,OAAQ,EACR,IAAKS,EACL,OAAQF,EACR,WAAaQ,GAAS,CAChBC,EAAiBD,CAAI,GACvBnB,EAAWD,GAAW,CAAC,GAAGA,EAAQoB,EAAK,OAAO,CAAC,EAG7CE,EAAiBF,CAAI,IAEpBpB,EAAO,KACLM,GACCA,EAAM,OAAS,QACfA,EAAM,YAAcc,EAAK,QAAQ,WACjCd,EAAM,MAAQc,EAAK,QAAQ,KAC3Bd,EAAM,SAAWc,EAAK,QAAQ,MAClC,GAEAnB,EAAWD,GAAW,CAAC,GAAGA,EAAQoB,EAAK,OAAO,CAAC,EAGrD,EACF,CAEH,CACH,EACAlB,EAAA,cAAC,OAAI,UAAU,sBACbA,EAAA,cAAC,UACC,KAAK,SACL,QAAS,IAAM,CACbD,EAAWD,GAAWQ,EAAWR,EAAQF,EAAMC,CAAO,CAAC,CACzD,EACA,UAAU,4CACX,aAED,EAEAG,EAAA,cAAC,UACC,KAAK,SACL,QAAS,IAAM,CACbE,EAAYmB,GAAY,CAACA,CAAO,CAClC,EACA,UAAU,4CAETpB,EAAU,QAAU,MACvB,CACF,CACF,CAEJ,CCvGA,IAAMqB,EAAO,EACPC,EAAU,EACVC,EAAQ,CAAE,IAAK,EAAG,UAAW,EAAG,EAEvB,SAARC,GAAwB,CAC7B,OACEC,EAAA,cAAC,QAAK,KAAK,QAAQ,UAAU,iBAC3BA,EAAA,cAAC,YACCA,EAAA,cAAC,QAAK,QAAQ,QAAQ,EACtBA,EAAA,cAAC,QAAK,KAAK,WAAW,QAAQ,sCAAsC,EACpEA,EAAA,cAAC,QACC,KAAK,cACL,QAAQ,kGACV,EAEAA,EAAA,cAAC,aAAM,2BAAe,EAEtBA,EAAA,cAAC,aAAO,uEAAwE,EAEhFA,EAAA,cAAC,QAAK,IAAI,aAAa,KAAK,qBAAqB,EACjDA,EAAA,cAAC,QACC,IAAI,OACJ,KAAK,2JACP,EAEAA,EAAA,cAAC,aAAO,EACRA,EAAA,cAAC,UACC,KAAK,SACL,IAAI,gDACN,EACAA,EAAA,cAAC,UAAO,SAAQ,GAAC,IAAI,iDAAiD,CACxE,EAEAA,EAAA,cAAC,QAAK,UAAU,iFACdA,EAAA,cAAC,WACCA,EAAA,cAACC,EAAA,CAAK,MAAOH,EAAO,KAAMF,EAAM,QAASC,EAAS,CACpD,CACF,CACF,CAEJ,CCxCAK,EAAS,YAAY,SAAUC,EAAA,cAACC,EAAA,IAAS,CAAE",
  "names": ["ReactImport", "ReactDOMImport", "xstateImport", "hash", "React", "ReactDOM", "clamp", "min", "max", "number", "wrap", "Directions", "moveBlocks", "blocks", "rows", "columns", "wrapRow", "wrap", "wrapColumn", "block", "row", "column", "previousRow", "nextRow", "previousColumn", "nextColumn", "isPlaceBaseEvent", "event", "isPlaceUnitEvent", "getBounds", "theme", "row", "column", "block", "halfBlock", "x", "y", "cx", "cy", "minX", "maxX", "minY", "maxY", "clampX", "clamp", "clampY", "Block", "props", "index", "emulatedDelta", "action", "player", "onActivate", "blocks", "lastTouchRef", "React", "manualDelta", "setManualDelta", "delta", "selectorPosition", "direction", "left", "right", "centerX", "top", "bottom", "centerY", "Directions", "isManuallyCapturing", "setIsManuallyCapturing", "isCapturing", "fill", "touch", "lastTouch", "getRow", "index", "columns", "getColumn", "Board", "props", "theme", "children", "players", "rows", "columns", "height", "width", "React", "grid", "_", "index", "row", "getRow", "column", "getColumn", "y", "Demo", "props", "theme", "rows", "columns", "blocks", "setBlocks", "React", "playing", "setPlaying", "hasBase", "block", "interval", "moveBlocks", "cells", "_", "index", "column", "getColumn", "row", "getRow", "Board", "Block", "thisRow", "thisColumn", "data", "isPlaceBaseEvent", "isPlaceUnitEvent", "current", "rows", "columns", "theme", "Page", "React", "Demo", "ReactDOM", "React", "Page"]
}
